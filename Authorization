#include "AuthManager.h"
#include <fstream>
#include <sstream>
#include <iostream>

AuthManager::AuthManager(const std::string& usersFile) : usersFile(usersFile) {}

bool AuthManager::login() {
    std::string username, password;
    std::cout << "Логін: ";
    if (!(std::cin >> username)) return false;
    std::cout << "Пароль: ";
    if (!(std::cin >> password)) return false;
    if (validateCredentials(username, password)) {
        currentUser = username;
        return true;
    }
    return false;
}

std::string AuthManager::getCurrentUser() const { return currentUser; }
bool AuthManager::isAdmin() const { return currentUser == "admin"; }

bool AuthManager::validateCredentials(const std::string& login, const std::string& password) const {
    std::ifstream file(usersFile);
    if (!file) {
        std::cerr << "Не вдалося відкрити файл користувачів: " << usersFile << "\n";
        return false;
    }
    std::string line;
    while (std::getline(file, line)) {
        if (line.empty()) continue;
        std::istringstream iss(line);
        std::string u, p;
        if (std::getline(iss, u, ':') && std::getline(iss, p)) {
            if (u == login && p == password) return true;
        }
    }
    return false;
}

std::vector<std::string> AuthManager::listUsers() const {
    std::vector<std::string> out;
    std::ifstream file(usersFile);
    if (!file) return out;
    std::string line;
    while (std::getline(file, line)) {
        if (line.empty()) continue;
        auto pos = line.find(':');
        if (pos != std::string::npos) out.push_back(line.substr(0, pos));
    }
    return out;
}

bool AuthManager::addUser(const std::string& username, const std::string& password) {
    auto users = listUsers();
    for (auto& u : users) if (u == username) return false;
    std::ofstream file(usersFile, std::ios::app);
    if (!file) return false;
    file << username << ':' << password << '\n';
    return true;
}

bool AuthManager::deleteUser(const std::string& username) {
    if (username == "admin") return false;
    std::ifstream file(usersFile);
    if (!file) return false;
    std::vector<std::string> lines;
    std::string line;
    bool found = false;
    while (std::getline(file, line)) {
        if (line.empty()) continue;
        auto pos = line.find(':');
        if (pos != std::string::npos) {
            std::string u = line.substr(0, pos);
            if (u == username) { found = true; continue; }
        }
        lines.push_back(line);
    }
    file.close();
    std::ofstream out(usersFile, std::ios::trunc);
    if (!out) return false;
    for (auto& l : lines) out << l << '\n';
    return found;
}
